package entity;

import java.awt.Color;
import java.awt.Graphics;

import tile.Tile;
import mario.Game;
import mario.Handler;
import mario.Id;

public class Player extends Entity{
	
	private int frame = 0;
	
	private int frameDelay = 0;
	
	private boolean isWalking = false;
	
	public Player(int x, int y, int width, int height, boolean solid, Id id,
			Handler handler) {
		super(x, y, width, height, solid, id, handler);
		
	}
	
	/**
	 * renders the player in the graphics
	 */
	public void render(Graphics g) {
		if(facing == 0){
			if(isWalking){
				g.drawImage(Game.player[frame].getBufferedImage(), x , y, width, height, null);
			}
			else{
				g.drawImage(Game.player[3].getBufferedImage(), x , y, width, height, null);
			}
			if(jumping){
				g.drawImage(Game.playerJumpLeft.getBufferedImage(), x , y, width, height, null);
			}
		}
		else if(facing == 1){
			if(isWalking){
				g.drawImage(Game.player[frame+4].getBufferedImage(), x , y, width, height, null);
			}
			else{
				g.drawImage(Game.player[4].getBufferedImage(), x , y, width, height, null);
			}
			if(jumping){
				g.drawImage(Game.playerJumpRight.getBufferedImage(), x , y, width, height, null);
			}
		}
		
	}
	
	/**
	 * Check player collisions
	 */
	public void checkCollision(){
		//This is checking for any collisions with solid tiles
		for(Tile t:handler.tile){
			if(!t.isSolid())
				continue;
			//You collide with wall. Do what?
			if(t.getId()==Id.wall){
				//You hit somthing with your head
				if(getBoundsTop().intersects(t.getBounds())){
					setVelY(0);
					//If you were jumping, stop jumping and fall down
					if(jumping){
						jumping = false;
						gravity = 0.8; 
						falling = true;
					}
				}
				//Falling off edge
				else if(!falling && !jumping){
					gravity = 0.8;
					falling = true;
				}
				//You landed on top of something (floor)
				if(getBoundsBottom ().intersects(t.getBounds())){
					setVelY(0);
					if(falling)
						falling = false;
				}
				
				if(getBoundsLeft ().intersects(t.getBounds())){
					setVelX(0);
					x = t.getX() + t.width;
				}
				if(getBoundsRight ().intersects(t.getBounds())){
					setVelX(0);
					x = t.getX() - t.width;
				}
			}				
		}
	}
	
	/**
	 * Controls a player's jumping
	 */
	public void checkJumping(){
		//Controls deceleration going up.
		if(jumping){
			gravity-=0.1;
			setVelY((int)-gravity);
			//You reached the top of your jump
			if(gravity<=0){
				jumping = false;
				falling = true;
			}
		}
	}
	
	/**
	 * Controls a player's falling
	 */
	public void checkFalling(){
		//Controls acceleration going down
		if(falling){
			gravity+=0.1;
			setVelY((int)gravity);
		}
	}
	
	public void animateWalking(){
		frameDelay++;
		if(isWalking){
			if(frameDelay>=3){
				frame++;
				if(frame>=4){
					frame = 0;
				}
				frameDelay = 0;
			}
		}
	}
	
	/**
	 * Controls movement of the player during the game
	 */
	public void tick() {
		//Increments or decrements the x and y positions by the velocity
		x+=velX;
		y+=velY;
		
		//Checks to make sure the player stays in bounds
		//if(x<=0)
			//x=0;
		//if(y<=0)
			//y=0;
		if(y+height>=771)
			y = 771-height;
		
		if(velX!=0){
			isWalking = true;
		}else{
			isWalking = false;
		}
		
		checkCollision();
		
		checkJumping();
		
		checkFalling();
		
		animateWalking();
		
	}
}
